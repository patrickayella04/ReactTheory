import React, { Component } from 'react'

class UserItem extends Component {

    // Severals ways to add state to a class based component. One is using a Constructor which isn't really recomended usless your need to us it for something else. It's basically a funcitons that will run when the component runs. 
    //constructor() {
    //super(); // We must call the function super() first which calls parent class constructor.
    // console.log(123) // We are loging 123 in console because the constructor fires off as soon as the component works. 
    //this.state = { // state is just a javaScript object. 
    //   id: 'id',
    //   login: 'mojombo',
    //   avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',
    //   html_url:'https://github.com/mojombo'
    // } // We have this information in our state object, so lets say we want to use it in our render below. We now have the avatar_url displayed in the component which is is stored in the component level state. 
    //}
      // We dont need to create a constructor to create state. We can just write state as below. 
    // state = { // state is just a javaScript object. 
    //     id: 'id',
    //     login: 'mojombo',
    //     avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',
    //     html_url: 'https://github.com/mojombo'
    // };
    
    
    // We continuously write this.state so we it's recomended we destructure below. const {login, avatar_url, html_url} = this.state;
    render() {
        // const { login, avatar_url, html_url } = this.state;
        const { login, avatar_url, html_url } = this.props.user;

        return (
            <div className="card text-center">
                <img src={avatar_url} alt="" className="round-img" style={{ width: '60px' }} /> 
                <h3>{login}</h3>

                <div>
                    <a href={html_url} className="btn btn-dark btn-sm my-1">More</a>
                </div>
            </div>
        )
    }
}

export default UserItem

// Funcitonal components - Traditionaly, before hooks, functional components were used for basically stateless components if there was no state. This userItem now has no state, everything is getting passed into the render as a prop. Also the navBar component doesn't have any state. So there is no reason for these components to be classes. 
////////////////////////////////////////////////
import React, { Component } from 'react';
import UserItem from './UserItem'

class Users extends Component {
    state = {
        users: [
            {
                id: '1',
                login: 'mojombo',
                avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',
                html_url: 'https://github.com/mojombo'
            },
            {
                id: '2',
                login: 'defunkt',
                avatar_url: 'https://avatars0.githubusercontent.com/u/2?v=4',
                html_url: 'https://github.com/defunkt'
            },
            {
                id: '3',
                login: 'pjhyett',
                avatar_url: 'https://avatars0.githubusercontent.com/u/3?v=4',
                html_url: 'https://github.com/pjhyett'
            }
        ]
    }
    // Map() is whats called a high order array method which actually takes in a function. Here we use a callback function. This particular function has a paremeter that represents each user which is called user. We call an arrow functions which says for each user we want to render the code written in the function. 

    // Instead of just outputing a div for each of the users in the state, we want to output a user item which is the component we created before this one in UserItem.js. We pass in the entire user, because what's happening is we are looping through the users in the state, for each one 'user variable represents each user in the array of objects. Then we pass it in as a prop to UserItem. 
    render() {
        return (
            //before
            // <div>
            //     {this.state.users.map(user => (
            //         <div key={user.id}>{user.login}</div>
            //     ))}
            // </div>
            // after
            // Passing state with Props
            <div style={userStyle}> 
                {this.state.users.map(user => (
                    <UserItem key={user.id} user = {user} />
                ))}
            </div>


        )
    }
}

const userStyle = {
    display: 'grid',
    gridTemplateColumns: 'repeat(3, 1fr)',
    gridGap: '1rem'
}

export default Users
/////////////////////////////////////////
import React, {Component, Fragment} from 'react';
import './App.css';
import Navbar from '../src/components/layout/Navbar'
import Users from './components/users/Users'

    

class App extends Component {

  render() {

    return (
      <Fragment> 
        
         <div className="App">
          
          <Navbar />
          
          <div className="container">
          <Users />
          </div>
            
          </div>
              
        </Fragment>
      );
    
  }
}

export default App;
// function App() {
//   return (
//     <div className="App">
//         <h1>Hello from React</h1>
//     </div>
//   );
// }

// export default App;

// Turing a function based component above into a class based component below. 

//We cannot return directly from a class, so we need to use a Method which is basically a function within a class. And that method needs to be called render(). Render is called a life cycle method, which means the it runs at a certain point when the component is loaded. Render is the only life cycle method which is required because it renders the output of the entire component.

// We have to Extend the core React component to App class. 

// JSX - JavaScript Syntax Extension - syntatical sugar to allow us to write the output of our component in an xml or html fashion. Under the hood JSX is just vanila JavaScript. Rule of thumb is that your JSX has to always have one parent ellement.

// Fragment - to avoid having a div as the parent element in the component, surrounding the jsx, appearing in the dom. We can use React.Fragment instead as the parent element and there will be no extra elements rendered in the dom. It's like a gohst element for comparison.

// Using variables - place variable within render method, and call it in return fragement inside curly braces. 

// If we wanted to add a method that's a part of the App class then we need to use this.myName. The this.keyword is very important because it refers to the current instance of the this object.In this case it pertains to the App class, and its function scope. 

///////////////////////////////////////
// 1. COMPONENT STATE
// Component level state means your state is contained wthin a single component. 
///////////////////////////////////////////////////
import React, { Component } from 'react';
//Prop types is type checking, it will tell you if your prop should be a number, string or an arry, or object or anything like that.We declare proptypes below as static = proptypes..This way props that are passed in are filtered so they are the correct data type of input making your application more robust. Short way to bring in prop types with our extension is type - impt enter :
import PropTypes from 'prop-types'


// Props - are properties that you can pass into a component from outside the component. 
// Default props - if we forget to define or put in props outside this component, we can use default props in the component which can be overriden if developer adds in their own props from outside this component. 

export class Navbar extends Component {
    static defaultProps = {
        title: 'Github Finder',
        icon: 'fab fa-github'
    };

    static propTypes = {
        title: PropTypes.string.isRequired,
        icon: PropTypes.string.isRequired
    }

    render() {
        return (
            <nav className="navbar bg-primary">
                <h1>
                    <i className={this.props.icon}/> {this.props.title}   
                </h1>
            </nav>
        )
    }
}

export default Navbar

////////////////////////////////////////////////////////

17th January 2021 : We only added router App.js

import React, { Component } from 'react';
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';
import './App.css';
import Navbar from '../src/components/layout/Navbar';
import Users from './components/users/Users';
import Search from './components/users/Search';
import axios from 'axios';
import Alert from './components/layout/Alert'



class App extends Component {
  state = {
    users: [],
    loading: false,  // We have loading as there will be a moment in time before we acually get the data back. While thats fetching we want loading to be true and as soon as its fetched we'll change it back to false. This way if our UI if this data isn't load then lets show a spinner. If i t is loaded then we show data. 
    alert: null // alert state we set it to null by default, when we have an alert and when we set one its going to be set as an object with Message & a Type in its paremerter. 
  }
  // componentDidMount() {
  //   axios.get('https://api.github.com/users').then(res => console.log(res.data));
  // } 
  // Refactor code to To async awaite to eliminate use of .then. Because we awaite the request. 
  // async componentDidMount() {
    
  //   // When you are changing state you cannot directly change it like ex. you cannot say this.state.loading = true. That's not the way we do it in react. At least with class based components we have to use this.setState({here we pass in an object with part of the state we want to change}).
  //   this.setState({ loading: true }); // Changes state to true

  //   const res = await axios.get(`https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);// After we make the request and we get the response. Then we reset the state, by taking users and set it to res.data that we get from the server/API, then we also set loading back to false. ex. this.seState({users: res.data, loading: false}).
  //   this.setState({ users: res.data, loading: false }); // Now that we have these 30 users in state, we want to pass them down into our users component through props. 

  // }
  // Whats Happing? - Once the form is submitted it's calling onSubmit in the Search.js component. Then within the onSubmit method, a prop is set to a function that calls searchUsers method that doesn't exist yet in that component, that passes in the this.state.text. Now in the App.js component the prop searchUsers is set next to Search component to call this.searchUsers to call in the App.js just below here. (This is called prop drilling, sending information up and down to compenents through props which can get messy or confusing- but there is another way :-)
  // Search Github users - We want to make a call to the github endpoint then add the query. 
  searchUsers = async text => { // adding async before the paremter
    this.setState({loading: true})

    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);// After we make the request and we get the response. Then we reset the state, by taking users and set it to res.data.items that we get from the server/API, then we also set loading back to false. ex. this.seState({users: res.data.items, loading: false}).
    this.setState({ users: res.data.items, loading: false });
  }

  // Clear users from state
  clearUsers = () => this.setState({ users: [], loading: false }); // In search.js when we click the clear button it will call the prop clearUsers that is catched in App.js which will fire off the method clearUsers here which set the users back to empty by clearing it in the UI. 

  // Set Alert
  setAlert = (msg, type) => {
    this.setState({ alert: { msg, type } }); // Alert set to object with a msg which be the msg thats passed in, and a type which will be th type thats passed in. This will not display anything but it will put the alert into the state above. 

    setTimeout(() => this.setState({alert: null}), 5000);// takes alert away after 5 seconds. 
  }

  render() {
    const { users, loading } = this.state; // Destructuring

    return (
      <Router> 
        
         <div className="App">
          
          <Navbar />
          
          <div className="container">
            <Alert alert={this.state.alert} />
            <Search searchUsers={this.searchUsers} clearUsers={this.clearUsers} showClear={users.length > 0 ? true: false} setAlert={this.setAlert} />
            <Users loading={loading} users={users}/> 
          </div>
            
          </div>
              
        </Router>
      );
    
  }
}

export default App;

// Preferably we want to store any app level state, such as our Users, in our app.js(since we are not currently using context or redux, we dont have a centralised store for state, the next best thing is to have it stored in your app.js) This way we can easily send state down to components through props. 

// We create a life cycle method - ComponentDidMount - this will run when the component mounts. React Lifecycle methods are the series of events that happen from the starting of a React component to its ending. 3. componentDidMount()
//ComponentDidMount - 
// Now the component has been mounted. This is the time where the next lifecycle method componentDidMount come in to play.

// This method is named as soon because the component is mounted and prepared. This is the best place to initiate API calls in order to fetch data from remote servers. In this method, you can use setState which will cause another rendering but It will happen before the browser updates the UI. This is to ensure that the user won’t see the intermediate state.

////////////////////////////////////////////////////////

17th January 2021

import React, { Component } from 'react';
import PropTypes from 'prop-types';


export class Search extends Component {
    state = {
        text: ''
    };

    static propTypes = {
        searchUsers: PropTypes.func.isRequired,
        clearUsers: PropTypes.func.isRequired,
        showClear: PropTypes.bool.isRequired,
        setAlert: PropTypes.func.isRequired
    };
    
    onSubmit = e => {
        e.preventDefault();
        //console.log(this.state.text); // We need to pass this infomation up to the main App component through props. Do we re-write the code with a function that we call searchUsers as this.props.searchUsers(this.state.text). 
        if (this.state.text === '') {
            this.props.setAlert('Please enter something', 'light')
        } else {
            this.props.searchUsers(this.state.text)
            // Then here we clear the form after -
            this.setState({ text: '' }); // setting local/component text to nothing.
        }
        
    }
    
    // We can't actually type in the input value because its a controlled component. So we need to have an onChange event for when we type in the input value area so when it fires off it will update the state.

    onChange = e => { // for this onChange method we want to setState
        this.setState({ text: e.target.value });
        // this.setState({ [e.target.name]: e.target.value }); // To avoide having to write a this.onChange for each input, we can change the setState to [e.target.whatever it is we are changeing]
    }

    // When you have a form in react usally we will want to attatch state to the input. 
    render() {
        const { showClear, clearUsers } = this.props; // Destructuring props

        return (
            <div>
                <form onSubmit={this.onSubmit} className="form">
                    <input type="text" name="text" placeholder="Search Users..." value={this.state.text} onChange={this.onChange}/>
                    <input type="submit" value="Search" className="btn btn-dark btn-block" />
                </form>
                {showClear && (<button button className="btn btn-light btn-block" onClick={clearUsers}>Clear</button>)}
            </div>
        )
    }
}

export default Search

////////////////////////////////////////////////////////////////////
 17th January 2021

import React from 'react';
import UserItem from './UserItem'
import Spinner from '../layout/Spinner';
import PropTypes from 'prop-types'


const Users = ({users, loading}) => { // users and loading geting passed into arrow function and destructured as a prop. 
    
   // We deleted the original hard coded state as it's now coming in from the server/api in app.js, and being passed into this components as props. So we then change this.state.users to this.props.users. 
    
    if (loading) { // loading passed in from app.js state
        return <Spinner />
    } else { // return all of the users
        return (
            
            <div style={userStyle}> 
                {users.map(user => (
                    <UserItem key={user.id} user = {user} />
                ))}
            </div>
        )
    }
    
        
    
}

Users.propTypes = {
    users: PropTypes.array.isRequired,
    loading: PropTypes.bool.isRequired
}

const userStyle = {
    display: 'grid',
    gridTemplateColumns: 'repeat(3, 1fr)',
    gridGap: '1rem'
}

export default Users

////////////////////////////////////////////////////
// import React, { Component } from 'react';
// import UserItem from './UserItem'

// class Users extends Component {
//     state = {
//         users: [
//             {
//                 id: '1',
//                 login: 'mojombo',
//                 avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',
//                 html_url: 'https://github.com/mojombo'
//             },
//             {
//                 id: '2',
//                 login: 'defunkt',
//                 avatar_url: 'https://avatars0.githubusercontent.com/u/2?v=4',
//                 html_url: 'https://github.com/defunkt'
//             },
//             {
//                 id: '3',
//                 login: 'pjhyett',
//                 avatar_url: 'https://avatars0.githubusercontent.com/u/3?v=4',
//                 html_url: 'https://github.com/pjhyett'
//             }
//         ]
//     }
//     // Map() is whats called a high order array method which actually takes in a function. Here we use a callback function. This particular function has a paremeter that represents each user which is called user. We call an arrow functions which says for each user we want to render the code written in the function. 

//     // Instead of just outputing a div for each of the users in the state, we want to output a user item which is the component we created before this one in UserItem.js. We pass in the entire user, because what's happening is we are looping through the users in the state, for each one 'user variable represents each user in the array of objects. Then we pass it in as a prop to UserItem. 
//     render() {
//         return (
//             //before
//             // <div>
//             //     {this.state.users.map(user => (
//             //         <div key={user.id}>{user.login}</div>
//             //     ))}
//             // </div>
//             // after
//             // Passing state with Props
//             <div style={userStyle}> 
//                 {this.state.users.map(user => (
//                     <UserItem key={user.id} user = {user} />
//                 ))}
//             </div>


//         )
//     }
// }

// const userStyle = {
//     display: 'grid',
//     gridTemplateColumns: 'repeat(3, 1fr)',
//     gridGap: '1rem'
// }

// export default Users

////////////////////////////////////////////////////////////////////////////////

21th January 2021

import React from 'react';
import PropTypes from 'prop-types';






const UserItem = ({user: { login, avatar_url, html_url }}) => {

   
        return (
            <div className="card text-center">
                <img src={avatar_url} alt="" className="round-img" style={{ width: '60px' }} /> 
                <h3>{login}</h3>

                <div>
                    <a href={html_url} className="btn btn-dark btn-sm my-1">More</a>
                </div>
            </div>
        )
    
}

UserItem.propTypes = {
    user: PropTypes.object.isRequired,
}

export default UserItem
/////////////////////////////////////////////////////////
// import React, { Component } from 'react'

// class UserItem extends Component {

//     // Severals ways to add state to a class based component. One is using a Constructor which isn't really recomended usless your need to us it for something else. It's basically a funcitons that will run when the component runs. 
//     //constructor() {
//     //super(); // We must call the function super() first which calls parent class constructor.
//     // console.log(123) // We are loging 123 in console because the constructor fires off as soon as the component works. 
//     //this.state = { // state is just a javaScript object. 
//     //   id: 'id',
//     //   login: 'mojombo',
//     //   avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',
//     //   html_url:'https://github.com/mojombo'
//     // } // We have this information in our state object, so lets say we want to use it in our render below. We now have the avatar_url displayed in the component which is is stored in the component level state. 
//     //}
//       // We dont need to create a constructor to create state. We can just write state as below. 
//     // state = { // state is just a javaScript object. 
//     //     id: 'id',
//     //     login: 'mojombo',
//     //     avatar_url: 'https://avatars0.githubusercontent.com/u/1?v=4',
//     //     html_url: 'https://github.com/mojombo'
//     // };
    
    
//     // We continuously write this.state so we it's recomended we destructure below. const {login, avatar_url, html_url} = this.state;
//     render() {
//         //const { login, avatar_url, html_url } = this.state;
//         const { login, avatar_url, html_url } = this.props.user;

//         return (
//             <div className="card text-center">
//                 <img src={avatar_url} alt="" className="round-img" style={{ width: '60px' }} /> 
//                 <h3>{login}</h3>

//                 <div>
//                     <a href={html_url} className="btn btn-dark btn-sm my-1">More</a>
//                 </div>
//             </div>
//         )
//     }
// }

// export default UserItem

// // Funcitonal components - Traditionaly, before hooks, functional components were used for basically stateless components if there was no state. This userItem now has no state, everything is getting passed into the render as a prop. Also the navBar component doesn't have any state. So there is no reason for these components to be classes. 


//////////////////////////////////////////////////////////

21st January 2021

import React, {Fragment} from 'react' // extension racf creactes arrow function component.
import spinner from './spinner.gif'


// export const Spinner = () => { // If there is no other javaScript here then we can return the fragment directly using arrow functions. so we lose the return(). see below
    
//     return (
//         <Fragment>
//             <img src={spinner} alt="loading..." style={{width: '200px', margin:'auto', display:'block'}}/>
//         </Fragment>
//     )
// }

export const Spinner = () =>  <Fragment>
    <img src={spinner} alt="loading..." style={{width: '200px', margin:'auto', display:'block'}}/>
    </Fragment>
    
export default Spinner

/////////////////////////////////////





